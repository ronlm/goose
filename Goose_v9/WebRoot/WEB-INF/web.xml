<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5">
  <display-name></display-name>
  <servlet>
    <description>
			JAX-WS endpoint - GooseWebServiceImplService
		</description>
    <display-name>GooseWebServiceImplService</display-name>
    <servlet-name>GooseWebServiceImplService</servlet-name>
    <servlet-class>
			com.sun.xml.ws.transport.http.servlet.WSServlet
		</servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>GooseWebServiceImplService</servlet-name>
    <url-pattern>/GooseWebServiceImplPort</url-pattern>
  </servlet-mapping>
  <welcome-file-list>
    <welcome-file>/Login.jsp</welcome-file>
  </welcome-file-list>
  <listener>
    <display-name>初始化log4j日志的目录，放到System.property里面(log.root)</display-name>
    <listener-class>cn.com.ege.mvc.init.Init</listener-class>
  </listener>
  
  <!-- Spring 容器的监听器 开始 -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:applicationContext.xml</param-value>
  </context-param>
  <!-- Spring 容器的监听器 结束 -->
  
  <!-- 编码过滤器 开始 -->
  <filter>
    <filter-name>encodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>encodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
    <!-- 编码过滤器 开始 -->
    
  <filter>
    <filter-name>openSessionInView</filter-name>
    <filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>
    <init-param>
      <param-name>sessionFactoryBeanName</param-name>
      <param-value>sessionFactory</param-value>
    </init-param>
    <init-param>
      <param-name>singleSession</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>flushMode</param-name>
      <param-value>AUTO </param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>openSessionInView</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <servlet>
    <servlet-name>ServletConfigurator</servlet-name>
    <servlet-class>
			org.logicalcobwebs.proxool.configuration.ServletConfigurator</servlet-class>
    <init-param>
      <param-name>propertyFile</param-name>
      <param-value>WEB-INF/Proxool.properties</param-value>
    </init-param>
    <load-on-startup>0</load-on-startup>
  </servlet>
  <servlet>
    <servlet-name>proxool</servlet-name>
    <servlet-class>org.logicalcobwebs.proxool.admin.servlet.AdminServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>proxool</servlet-name>
    <url-pattern>/Admin/proxool/</url-pattern>
  </servlet-mapping>
  <servlet>
    <description>A Servlet for return goose record</description>
    <display-name>A Servlet for return search goose record</display-name>
    <servlet-name>SearchResultServlet</servlet-name>
    <servlet-class>com.scau.servlet.goose.SearchResultServlet</servlet-class>
  </servlet>
  <servlet>
    <description>This is used to sale statistic</description>
    <display-name>This is used to sale statistic</display-name>
    <servlet-name>SaleStatisticServlet</servlet-name>
    <servlet-class>com.scau.servlet.goose.SaleStatisticServlet</servlet-class>
  </servlet>
  <servlet>
    <description>This is used to export data to excel form</description>
    <display-name>This is used to export data to excel form</display-name>
    <servlet-name>ExportDataServlet</servlet-name>
    <servlet-class>com.scau.servlet.goose.ExportDataServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>SearchResultServlet</servlet-name>
    <url-pattern>/servlet/SearchResultServlet</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>SaleStatisticServlet</servlet-name>
    <url-pattern>/servlet/SaleStatisticServlet</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>ExportDataServlet</servlet-name>
    <url-pattern>/data/exportData/ExportData</url-pattern>
  </servlet-mapping>
  <filter>
    <filter-name>SecurityFilter</filter-name>
    <filter-class>cn.com.ege.mvc.security.SecurityFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>SecurityFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  
  <!-- Struts2的拦截器 开始 -->
  <filter>
    <filter-name>struts2</filter-name>
    <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>struts2</filter-name>
    <url-pattern>/pages/*</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>struts2</filter-name>
    <url-pattern>/login/*</url-pattern>
  </filter-mapping>
    <!-- Struts2的拦截器 结束 -->
    
   <error-page>
   		<error-code>500</error-code>
   		<location>/error/Error.jsp</location>
   </error-page>
    <error-page>
   		<error-code>404</error-code>
   		<location>/error/404.jsp</location>
   </error-page>
    <error-page>
   		<error-code>403</error-code>
   		<location>/error/403.jsp</location>
   </error-page>
   
   
  <mime-mapping>
    <extension>rar</extension>
    <mime-type>application/rar</mime-type>
  </mime-mapping>
  <listener>
    <listener-class>
			com.sun.xml.ws.transport.http.servlet.WSServletContextListener
		</listener-class>
  </listener>
</web-app>